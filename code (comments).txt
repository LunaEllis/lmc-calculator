// Start of the program, and also the main loop. Resets variables to zero, so the program doesn't break.
start LDA zero
STA input
STA a
STA b
STA result

// Decodes user input,  and branches to the correct part of the program.
INP
STA input
SUB ad
BRZ addition
LDA input
SUB sb
BRZ subtraction
LDA input
SUB multiply
BRZ multiplication
LDA input
SUB divide
BRZ division
// If the user's input doesn't match any of the four operation key-codes, the program halts.
HLT

// Once branched to, asks the user for two numbers and adds them together, outputting the result.
addition INP
STA a
INP
ADD a
OUT
BRA start

// Once branched to, asks the user for two numbers and subtracts the second from the first, outputting the result.
subtraction INP
STA a
INP
STA b
LDA a
SUB b
OUT
BRA start

// Once branched to, asks the user for two numbers and multiplies them together, outputting the result.
multiplication INP
STA a
STA result
INP
SUB ad
STA b
m_loop LDA result
ADD a
STA result
LDA b
SUB ad
STA b
BRZ m_end
BRA m_loop
m_end LDA result
OUT
BRA start

// Once branched to, asks the user for two numbers and divides the first by the second, outputting the result.
division INP
STA a
INP
STA b
d_loop LDA a
SUB b
STA a
LDA result
ADD ad
STA result
LDA a
BRZ whole
SUB ad
BRP d_loop
LDA result
SUB ad
OUT
BRA start
whole LDA result
OUT
BRA start



// Defines the variables used.
input DAT
a DAT
b DAT
result DAT

ad DAT 1
sb DAT 2
multiply DAT 3
divide DAT 4
zero DAT 0

// NOTE: On ( https://peterhigginson.co.uk/LMC/ ), branch addresses don't have to be defined. This may be required on alternative simulators.
// If this is required, here is the code to copy over as well:
// start DAT
// addition DAT
// subtraction DAT
// multiplication DAT
// divison DAT
// m_loop DAT
// m_end DAT
// d_loop DAT
